enum ContractType {
  ERC721,
  ERC1155
  RMRK,
}

type AnyJson @jsonField {
  # Need a value for codegen but type is any
  _: String
}

type Nft @entity {
  id: ID! #CollectionID-TokenId
  tokenId: String!
  amount: BigInt! #1 for Erc721. 1155 semi-fungible has other values
  collection: Collection!
  minted_block: BigInt! # Should be bigInt
  minted_timestamp: BigInt! # unix epoch timestamp
  minter_address: Address! #whoever called the tx
  current_owner: Address! # event to
  contract_type: ContractType # e.g. ERC721, RMRK Hardcode
  metadata_uri: String
  metadata: AnyJson
#  name: String
#  symbol: String
#  token_uri: String
#  image_uri: String
#  description: String
}

type Collection @entity {
  id: ID! # chainID-contract adddress
  network: Network!
  contract_address: String!
  created_block: BigInt!
  created_timestamp: BigInt! # unix epoch timestamp
  minter_address: Address
  total_supply: BigInt
  name: String
  symbol: String
#  floor_price: Int # Later on
}

type Transfers @entity {
  id: ID!
  tokenId: String!
  amount: BigInt! # Same as with NFT
  network: Network!
  block: BigInt
  timestamp: BigInt
  transaction_id: String # Hash or extrinsic id
  nft: Nft
  from: Address
  to: Address
}

type Address @entity {
  id: ID! # network + address
  address: String!
  network: Network!
}

type Network @entity {
  id: ID!
  name: String
}